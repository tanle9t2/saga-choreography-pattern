spring:
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    hibernate:
      ddl-auto: update
  application:
    name: payment-service
  datasource:
    url: jdbc:mysql://localhost:3306/mc-1
    username: root
    password: 090224T@n
  webflux:
    base-path: /payment-app/api/v1

  kafka:
    producer:
      bootstrap-servers: 127.0.0.1:9091,127.0.0.1:9092,127.0.0.1:9093
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping:
          paymentEvent:com.tanle.payment_service.event.PaymentEvent,orderEvent:com.tanle.payment_service.event.OrderEvent # Add mapping for `orderEvent`
    consumer:
      group-id: saga-service
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"
        spring.json.type.mapping: orderEvent:com.tanle.payment_service.event.OrderEvent
      auto-offset-reset: earliest
#  cloud:
#    stream:
#      function:
#        definition: paymentProcess
#      bindings:
#        paymentProcess-in-0:
#          destination: order-event
#        paymentProcess-out-0:
#          destination: payment-event
#high Abstracts Kafka, RabbitMQ, etc.
server:
  port: 8081
